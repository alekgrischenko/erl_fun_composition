* elixir

mix compile
iex -S mix
> BookShop.test_data
> Main1.main

r MyModule

http://elixirschool.com/ru/lessons/specifics/debugging/
mix dialyzer


* erlang

rebar3 compile
rebar3 shell
> main_1:main().
> main_2:main().
> main_3:main().
> main_4:main().
> main_5:main().


* haskell

make compile
make main_4
make main_5


* monads in elixir

With:
https://elixir-lang.org/getting-started/mix-otp/docs-tests-and-with.html#with
https://hexdocs.pm/elixir/Kernel.SpecialForms.html#with/1

Monad:
http://www.zohaib.me/monads-in-elixir-2/
https://hex.pm/packages/monad
https://hexdocs.pm/monad/Monad.Error.html


* Какие вообще есть способы композиции?

точка, $, & или |> (pipe)
<$>, <*>
>>= bind, >> fmap
=<<
<=< >=> рыба

В эликсире
только |>
еще есть макрос with

В эрланге ничего

Реализация в Erlang работает только для одного типа возвращаемого значения: {ok, _} | {error, _}.
В Haskell это работает для любой монады.


* pipeline

В чем разница между pipeline & do-notation?

В pipeline через все функции прокидывается State.
Значит, комбинировать можно только такие функции, которые знают про этот State и умеют с ним работать.

В do-notation State существует отдельно от функций, и комбинировать можно любые функции.


* макрос with

сравнить с do-notation
